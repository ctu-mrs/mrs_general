<launch>

  <!-- args corresponding to environment variables -->
  <arg name="UAV_NAME" default="$(env UAV_NAME)" />
  <arg name="NATO_NAME" default="$(env NATO_NAME)" />
  <arg name="UAV_TYPE" default="$(env UAV_TYPE)" />
  <arg name="RUN_TYPE" default="$(env RUN_TYPE)" />
  <arg name="SENSORS" default="$(env SENSORS)" />
  <arg name="PIXGARM" default="$(optenv PIXGARM false)" />
  <arg name="STANDALONE" default="$(optenv STANDALONE false)" />

    <!-- other args -->
  <arg name="fcu_frame" default="$(arg UAV_NAME)/fcu" />
  <arg name="fcu_frame_slashless" default="fcu_$(arg UAV_NAME)" />

    <!-- Mavros -->
  <include file="$(find mrs_general)/launch/mavros_uav.launch" />

    <!-- Teraranger one //{ -->

  <group if="$(eval 'teraranger' in arg('SENSORS'))">

    <arg name="teraranger_frame" default="teraranger_frame" />

    <include file="$(find terarangerone)/launch/uav.launch" />

    <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg teraranger_frame)_to_$(arg fcu_frame_slashless)" args="0.0 0.1 -0.03 0 1.57079632679 0.0 $(arg fcu_frame) $(arg teraranger_frame)" />

  </group>

  <!-- //} -->

  <!-- Garmin //{ -->

  <group if="$(eval 'garmin' in arg('SENSORS'))">

    <arg name="garmin_frame" default="garmin_frame" />
    <arg name="garmin_frame_up" default="garmin_frame_up" />

      <!-- TF for garmin down -->
    <group ns="$(arg UAV_NAME)" if="$(eval 'garmin_down' in arg('SENSORS').replace(',', ' ').split())">

      <group if="$(eval arg('UAV_TYPE') == 'f450')">
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg garmin_frame)_to_$(arg fcu_frame_slashless)" args="0.0 0.1 -0.03 0 1.57079632679 0.0 $(arg fcu_frame) $(arg garmin_frame)" />
      </group>

      <group if="$(eval arg('UAV_TYPE') == 'f550')">
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg garmin_frame)_to_$(arg fcu_frame_slashless)" args="0.0 0.1 -0.03 0 1.57079632679 0.0 $(arg fcu_frame) $(arg garmin_frame)" />
      </group>

      <group if="$(eval arg('UAV_TYPE') == 't650')">
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg garmin_frame)_to_$(arg fcu_frame_slashless)" args="0.0 0.1 -0.03 0 1.57079632679 0.0 $(arg fcu_frame) $(arg garmin_frame)" />
      </group>

      <group if="$(eval arg('UAV_TYPE') == 'naki')">
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg garmin_frame)_to_$(arg fcu_frame_slashless)" args="0.19918 -0.115 -0.025 0 1.57079632679 0.0 $(arg fcu_frame) $(arg garmin_frame)" />
      </group>

    </group>

    <!-- TF for garmin up -->
    <group ns="$(arg UAV_NAME)" if="$(eval 'garmin_up' in arg('SENSORS').replace(',', ' ').split())">
      <group if="$(eval arg('UAV_TYPE') == 'f450')">
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg garmin_frame_up)_to_$(arg fcu_frame_slashless)" args="0.0 0.13 0.02 0 -1.57079632679 0.0 $(arg fcu_frame) $(arg garmin_frame_up)" />
      </group>

      <group if="$(eval arg('UAV_TYPE') == 'f550')">
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg garmin_frame)_to_$(arg fcu_frame_slashless)" args="0.0 0.13 0.02 0 -1.57079632679 0.0 $(arg fcu_frame) $(arg garmin_frame_up)" />
      </group>

      <group if="$(eval arg('UAV_TYPE') == 't650')">
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg garmin_frame_up)_to_$(arg fcu_frame_slashless)" args="0.0 0.13 0.02 0 -1.57079632679 0.0 $(arg fcu_frame) $(arg garmin_frame_up)" />
      </group>

      <group if="$(eval arg('UAV_TYPE') == 'naki')">
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg garmin_frame_up)_to_$(arg fcu_frame_slashless)" args="0.09 -0.039 -0.01 0 -1.57079632679 0.0 $(arg fcu_frame) $(arg garmin_frame_up)" />
      </group>
    </group>

    <!-- The node -->
    <group if="$(eval not arg('PIXGARM'))">
      <include file="$(find mrs_serial)/launch/uav.launch" />
    </group>

  </group>

  <!-- //} -->

  <!-- Rplidar //{ -->

  <group if="$(eval 'rplidar' in arg('SENSORS'))">

    <arg name="rplidar_frame" default="rplidar_$(arg UAV_NAME)" />

      <!-- TF -->
    <group if="$(eval arg('UAV_TYPE') == 'f450')">
      <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg rplidar_frame)_to_$(arg fcu_frame_slashless)" args="0.0 0.0 0.15 0 0.0 0.0 $(arg fcu_frame) $(arg rplidar_frame)" />
    </group>

    <group if="$(eval arg('UAV_TYPE') == 'f550')">
      <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg rplidar_frame)_to_$(arg fcu_frame_slashless)" args="0.0 0.0 0.15 0 0.0 0.0 $(arg fcu_frame) $(arg rplidar_frame)" />
    </group>

    <group if="$(eval arg('UAV_TYPE') == 't650')">
      <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg rplidar_frame)_to_$(arg fcu_frame_slashless)" args="0.0 0.0 0.15 0 0.0 0.0 $(arg fcu_frame) $(arg rplidar_frame)" />
    </group>

    <group if="$(eval arg('UAV_TYPE') == 'naki')">
      <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg rplidar_frame)_to_$(arg fcu_frame_slashless)" args="0.0 0.0 0.205 0 0.0 0.0 $(arg fcu_frame) $(arg rplidar_frame)" />
    </group>

    <!-- The node -->
    <include file="$(find rplidar_ros)/launch/uav.launch" />

  </group>

  <!-- //} -->

  <!-- Realsense //{ -->

  <group if="$(eval ('realsense' in arg('SENSORS')))">

    <arg name="realsense_frame" default="rs_d435_$(arg UAV_NAME)_link" />

      <!-- TF -->
    <group if="$(eval ('realsense_front' in arg('SENSORS').replace(',', ' ').split()))">

      <group if="$(eval arg('UAV_TYPE') == 'f450')">
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg realsense_frame)_to_$(arg fcu_frame_slashless)" args="0.16 0.0 -0.05 0.0 0.0 0.0 $(arg fcu_frame) $(arg realsense_frame)" />
      </group>

      <group if="$(eval arg('UAV_TYPE') == 'f550')">
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg realsense_frame)_to_$(arg fcu_frame_slashless)" args="0.3 0 -0.05 0 0 0 $(arg fcu_frame) $(arg realsense_frame)" />
      </group>

      <group if="$(eval arg('UAV_TYPE') == 't650')">
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg realsense_frame)_to_$(arg fcu_frame_slashless)" args="0.158 0 -0.05 0 0 0 $(arg fcu_frame) $(arg realsense_frame)" />
      </group>

      <group if="$(eval arg('UAV_TYPE') == 'naki')">
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg realsense_frame)_to_$(arg fcu_frame_slashless)" args="0.3 0 -0.05 0 0 0 $(arg fcu_frame) $(arg realsense_frame)" />
      </group>

      <include file="$(find realsense_d435)/launch/high_acc.launch" />

    </group>

    <!-- TF -->
    <group if="$(eval ('realsense_brick' in arg('SENSORS').replace(',', ' ').split()))">

      <group if="$(eval arg('UAV_TYPE') == 'f450')">
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg realsense_frame)_to_$(arg fcu_frame_slashless)" args="0.16 0.0 -0.05 0.0 0.0 0.0 $(arg fcu_frame) $(arg realsense_frame)" />
      </group>

      <group if="$(eval arg('UAV_TYPE') == 'f550')">
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg realsense_frame)_to_$(arg fcu_frame_slashless)" args="0.3 0 -0.05 0 0 0 $(arg fcu_frame) $(arg realsense_frame)" />
      </group>

      <group if="$(eval arg('UAV_TYPE') == 't650')">
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg realsense_frame)_to_$(arg fcu_frame_slashless)" args="0 0.19 -0.04 3.14159265359 -0.2617993878 -3.14159265359 $(arg fcu_frame) $(arg realsense_frame)" />
      </group>

      <group if="$(eval arg('UAV_TYPE') == 'naki')">
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg realsense_frame)_to_$(arg fcu_frame_slashless)" args="0.3 0 -0.05 0 0 0 $(arg fcu_frame) $(arg realsense_frame)" />
      </group>

      <include file="$(find realsense_d435)/launch/uav_brick.launch" />

    </group>


  </group>

  <!-- //} -->

  <!-- Bluefox //{ -->

  <group if="$(eval ('bluefox' in arg('SENSORS')))">

    <!-- Bluefox optflow //{ -->

    <group if="$(eval ('bluefox_optflow' in arg('SENSORS').replace(',', ' ').split()))">

      <arg name="camera_frame" default="bluefox_optflow_frame_$(arg UAV_NAME)" />

        <!-- TF -->

      <group if="$(eval arg('UAV_TYPE') == 'f450')">
        <arg name="cam_yaw" default="-1.57079632679" />
        <node pkg="tf2_ros" type="static_transform_publisher" name="optflow_cam_tf" args="0 0 -0.1 $(arg cam_yaw) 0.00000000000 -3.14159265359 $(arg fcu_frame) $(arg camera_frame)" />
      </group>

      <group if="$(eval arg('UAV_TYPE') == 'f550')">
        <arg name="cam_yaw" default="-1.57079632679" />
        <node pkg="tf2_ros" type="static_transform_publisher" name="optflow_cam_tf" args="0 0 -0.1 $(arg cam_yaw) 0.00000000000 -3.14159265359 $(arg fcu_frame) $(arg camera_frame)" />
      </group>

      <group if="$(eval arg('UAV_TYPE') == 't650')">
        <arg name="cam_yaw" default="-1.57079632679" />
        <node pkg="tf2_ros" type="static_transform_publisher" name="optflow_cam_tf" args="-0.04 -0.18 -0.06 $(arg cam_yaw) 0.00000000000 -3.14159265359 $(arg fcu_frame) $(arg camera_frame)" />
      </group>

      <group if="$(eval arg('UAV_TYPE') == 'naki')">
        <arg name="cam_yaw" default="-1.57079632679" />
        <node pkg="tf2_ros" type="static_transform_publisher" name="optflow_cam_tf" args="0 0 -0.1 $(arg cam_yaw) 0.00000000000 -3.14159265359 $(arg fcu_frame) $(arg camera_frame)" />
      </group>

      <arg     if="$(arg STANDALONE)" name="nodelet" value="STANDALONE" />
      <arg unless="$(arg STANDALONE)" name="nodelet" value="load" />
      <arg     if="$(arg STANDALONE)" name="nodelet_manager" value="" />
      <arg unless="$(arg STANDALONE)" name="nodelet_manager" value="$(arg UAV_NAME)_optflow_nodelet_manager" />

        <!-- Nodelet manager -->
      <group ns="$(arg UAV_NAME)" if="$(eval arg('STANDALONE') == 0)">

        <node pkg="nodelet" type="nodelet" name="$(arg UAV_NAME)_optflow_nodelet_manager" args="manager" output="screen" launch-prefix="bash -c 'sleep 5; $0 $@'">
          <param name="num_worker_threads" value="8" />
        </node>

      </group>

      <arg name="cam_device" default="$(env BLUEFOX_OF)" />
      <arg name="cam_rate" default="100" />
      <arg name="cam_plugin" default="true" />
      <arg name="cam_output" default="screen" />
      <arg name="cam_proc" default="false" />
      <arg name="cam_view" default="false" />
      <arg name="cam_calib" default="false" />

      <arg name="serial" default="$(arg cam_device)" />
      <arg name="camera_name" default="bluefox_optflow" />
      <arg name="camera" default="$(arg camera_name)" />
      <arg name="frame_id" default="$(arg camera)" />
      <arg name="calib_url" default="file://$(find mrs_general)/config/camera_calibrations/mv_$(arg cam_device).yaml" />
      <arg name="fps" default="$(arg cam_rate)" />
      <arg name="color" default="false" />
      <arg name="idpf" default="0" />
      <arg name="aec" default="true" />
      <arg name="expose_upper_limit_us" default="7500" />

      <arg name="expose_us" default="400" />
      <arg name="agc" default="true" />
      <arg name="boost" value="false" />
      <arg name="gain_db" default="0.0" />
      <arg name="cbm" default="0" />
      <arg name="ctm" default="1" />
      <arg name="dcfm" default="0" />
      <arg name="hdr" default="false" />
      <arg name="wbp" default="-1" />
      <arg name="request" default="0" />
      <arg name="mm" default="0" />

        <!-- Arguments for theora quality, images being compressed into "stream" -->
      <arg name="compressed_jpeg_quality" default="90" />
      <arg name="theora_keyframe_frequency" default="60" />
      <arg name="theora_target_bitrate" default="50000" />
      <arg name="theora_quality" default="8" />
      <arg name="theora_optimize_for" default="0" />

        <!-- Nodeleted bluefox node //{ -->

      <group ns="$(arg UAV_NAME)" if="$(eval arg('STANDALONE') == 0)">

        <include file="$(find bluefox2)/launch/single_nodelet.launch" >

          <!-- Common Interface -->
          <arg name="device" value="$(arg cam_device)" />
          <arg name="rate" value="$(arg cam_rate)" />

            <!-- Camera Settings -->
          <arg name="serial" value="$(arg cam_device)" />
          <arg name="camera_name" value="$(arg camera_name)" />
          <arg name="camera" value="$(arg camera)" />
          <arg name="frame_id" value="$(arg frame_id)" />
          <arg name="calib_url" value="$(arg calib_url)" />
          <arg name="fps" value="$(arg fps)" />
          <arg name="color" value="$(arg color)" />
          <arg name="aec" value="$(arg aec)" />
          <arg name="expose_upper_limit_us" value="$(arg expose_upper_limit_us)" />
          <arg name="cbm" value="$(arg cbm)" />
          <arg name="ctm" value="$(arg ctm)" />
          <arg name="dcfm" value="$(arg dcfm)" />
          <arg name="hdr" value="$(arg hdr)" />
          <arg name="wbp" value="$(arg wbp)" />
          <arg name="expose_us" value="$(arg expose_us)" />
          <arg name="gain_db" value="$(arg gain_db)" />
          <arg name="boost" value="$(arg boost)" />
          <arg name="mm" value="$(arg mm)" />

            <!-- Node Settings -->
          <arg name="plugin" value="$(arg cam_plugin)" />
          <arg name="manager" value="$(arg UAV_NAME)_optflow_nodelet_manager" />
          <arg name="output" value="$(arg cam_output)" />
          <arg name="proc" value="$(arg cam_proc)" />
          <arg name="view" value="$(arg cam_view)" />
          <arg name="calib" value="$(arg cam_calib)" />

            <!-- Arguments for theora quality, images being compressed into "stream" -->
          <arg name="compressed_jpeg_quality" default="$(arg compressed_jpeg_quality)" />
          <arg name="theora_keyframe_frequency" default="$(arg theora_keyframe_frequency)" />
          <arg name="theora_target_bitrate" default="$(arg theora_target_bitrate)" />
          <arg name="theora_quality" default="$(arg theora_quality)" />
          <arg name="theora_optimize_for" default="$(arg theora_optimize_for)" />

        </include>

      </group>

      <!-- //} -->

      <!-- Standalone bluefox node //{ -->

      <group ns="$(arg UAV_NAME)" if="$(eval arg('STANDALONE') == 1)">

        <include file="$(find bluefox2)/launch/single_node.launch" >

          <!-- Common Interface -->
          <arg name="device" value="$(arg cam_device)" />
          <arg name="rate" value="$(arg cam_rate)" />

            <!-- Camera Settings -->
          <arg name="serial" value="$(arg cam_device)" />
          <arg name="camera_name" value="$(arg camera_name)" />
          <arg name="camera" value="$(arg camera)" />
          <arg name="frame_id" value="$(arg frame_id)" />
          <arg name="calib_url" value="$(arg calib_url)" />
          <arg name="fps" value="$(arg fps)" />
          <arg name="color" value="$(arg color)" />
          <arg name="aec" value="$(arg aec)" />
          <arg name="expose_upper_limit_us" value="$(arg expose_upper_limit_us)" />
          <arg name="cbm" value="$(arg cbm)" />
          <arg name="ctm" value="$(arg ctm)" />
          <arg name="dcfm" value="$(arg dcfm)" />
          <arg name="hdr" value="$(arg hdr)" />
          <arg name="wbp" value="$(arg wbp)" />
          <arg name="expose_us" value="$(arg expose_us)" />
          <arg name="gain_db" value="$(arg gain_db)" />
          <arg name="boost" value="$(arg boost)" />
          <arg name="mm" value="$(arg mm)" />

            <!-- Node Settings -->
          <arg name="plugin" value="$(arg cam_plugin)" />
          <arg name="output" value="$(arg cam_output)" />
          <arg name="proc" value="$(arg cam_proc)" />
          <arg name="view" value="$(arg cam_view)" />
          <arg name="calib" value="$(arg cam_calib)" />

            <!-- Arguments for theora quality, images being compressed into "stream" -->
          <arg name="compressed_jpeg_quality" default="$(arg compressed_jpeg_quality)" />
          <arg name="theora_keyframe_frequency" default="$(arg theora_keyframe_frequency)" />
          <arg name="theora_target_bitrate" default="$(arg theora_target_bitrate)" />
          <arg name="theora_quality" default="$(arg theora_quality)" />
          <arg name="theora_optimize_for" default="$(arg theora_optimize_for)" />

        </include>

      </group>

      <!-- //} -->

    </group>

    <!-- //} -->

    <!-- Bluefox brick //{ -->

    <group if="$(eval ('bluefox_brick' in arg('SENSORS').replace(',', ' ').split()))">

      <arg name="camera_frame" default="brick_cam_$(arg UAV_NAME)" />

        <!-- TF -->

      <arg name="brick_cam_yaw" default="3.14159265359" />

      <group if="$(eval arg('NATO_NAME') == 'echo')">
        <node pkg="tf2_ros" type="static_transform_publisher" name="brick_cam_tf" args="0 -0.15 -0.06 $(arg brick_cam_yaw) 0.00000000000 -3.14159265359 $(arg fcu_frame) $(arg camera_frame)" />
      </group>

      <arg     if="$(arg STANDALONE)" name="nodelet" value="STANDALONE" />
      <arg unless="$(arg STANDALONE)" name="nodelet" value="load" />
      <arg     if="$(arg STANDALONE)" name="nodelet_manager" value="" />
      <arg unless="$(arg STANDALONE)" name="nodelet_manager" value="$(arg UAV_NAME)_brick_nodelet_manager" />

        <!-- Nodelet manager -->
      <group ns="$(arg UAV_NAME)" if="$(eval arg('STANDALONE') == 0)">

        <node pkg="nodelet" type="nodelet" name="$(arg UAV_NAME)_brick_nodelet_manager" args="manager" output="screen">
          <param name="num_worker_threads" value="5" />
        </node>

      </group>

      <arg name="cam_device" default="$(env BLUEFOX_BRICK)" />
      <arg name="cam_rate" default="30" />
      <arg name="cam_plugin" default="true" />
      <arg name="cam_output" default="screen" />
      <arg name="cam_proc" default="false" />
      <arg name="cam_view" default="false" />
      <arg name="cam_calib" default="false" />

      <arg name="serial" default="$(arg cam_device)" />
      <arg name="camera_name" default="bluefox_brick" />
      <arg name="camera" default="$(arg camera_name)" />
      <arg name="frame_id" default="$(arg camera_frame)" />
      <arg name="calib_url" default="file://$(find mrs_general)/config/camera_calibrations/mv_$(arg cam_device).yaml" />
      <arg name="fps" default="$(arg cam_rate)" />
      <arg name="color" default="true" />
      <arg name="idpf" default="0" />
      <arg name="aec" default="true" />
      <arg name="expose_upper_limit_us" default="7500" />
      <arg name="des_grey_value" default="50" />
      <arg name="expose_us" default="100" />
      <arg name="agc" default="true" />
      <arg name="boost" value="false" />
      <arg name="gain_db" default="0.0" />
      <arg name="cbm" default="0" />
      <arg name="ctm" default="1" />
      <arg name="dcfm" default="0" />
      <arg name="hdr" default="false" />
      <arg name="wbp" default="-1" />
      <arg name="request" default="0" />
      <arg name="mm" default="0" />

        <!-- Arguments for theora quality, images being compressed into "stream" -->
      <arg name="compressed_jpeg_quality" default="90" />
      <arg name="theora_keyframe_frequency" default="60" />
      <arg name="theora_target_bitrate" default="50000" />
      <arg name="theora_quality" default="8" />
      <arg name="theora_optimize_for" default="0" />

        <!-- Nodeleted bluefox node //{ -->

      <group ns="$(arg UAV_NAME)" if="$(eval arg('STANDALONE') == 0)">

        <include file="$(find bluefox2)/launch/single_nodelet.launch" >

          <!-- Common Interface -->
          <arg name="device" value="$(arg cam_device)" />
          <arg name="rate" value="$(arg cam_rate)" />

            <!-- Camera Settings -->
          <arg name="serial" value="$(arg cam_device)" />
          <arg name="camera_name" value="$(arg camera_name)" />
          <arg name="camera" value="$(arg camera)" />
          <arg name="frame_id" value="$(arg frame_id)" />
          <arg name="calib_url" value="$(arg calib_url)" />
          <arg name="fps" value="$(arg fps)" />
          <arg name="color" value="$(arg color)" />
          <arg name="aec" value="$(arg aec)" />
          <arg name="expose_upper_limit_us" value="$(arg expose_upper_limit_us)" />
          <arg name="des_grey_value" value="$(arg des_grey_value)"/>
          <arg name="cbm" value="$(arg cbm)" />
          <arg name="ctm" value="$(arg ctm)" />
          <arg name="dcfm" value="$(arg dcfm)" />
          <arg name="hdr" value="$(arg hdr)" />
          <arg name="wbp" value="$(arg wbp)" />
          <arg name="expose_us" value="$(arg expose_us)" />
          <arg name="gain_db" value="$(arg gain_db)" />
          <arg name="boost" value="$(arg boost)" />
          <arg name="mm" value="$(arg mm)" />

            <!-- Node Settings -->
          <arg name="plugin" value="$(arg cam_plugin)" />
          <arg name="manager" value="$(arg UAV_NAME)_brick_nodelet_manager" />
          <arg name="output" value="$(arg cam_output)" />
          <arg name="proc" value="$(arg cam_proc)" />
          <arg name="view" value="$(arg cam_view)" />
          <arg name="calib" value="$(arg cam_calib)" />

            <!-- Arguments for theora quality, images being compressed into "stream" -->
          <arg name="compressed_jpeg_quality" default="$(arg compressed_jpeg_quality)" />
          <arg name="theora_keyframe_frequency" default="$(arg theora_keyframe_frequency)" />
          <arg name="theora_target_bitrate" default="$(arg theora_target_bitrate)" />
          <arg name="theora_quality" default="$(arg theora_quality)" />
          <arg name="theora_optimize_for" default="$(arg theora_optimize_for)" />

        </include>

      </group>

      <!-- //} -->

    </group>

    <!-- //} -->

  </group>

  <!-- //} -->

</launch>
