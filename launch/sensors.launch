<launch>

  <!-- args corresponding to environment variables -->
  <arg name="UAV_NAME" default="$(env UAV_NAME)" />
  <arg name="NATO_NAME" default="$(env NATO_NAME)" />
  <arg name="UAV_TYPE" default="$(env UAV_TYPE)" />
  <arg name="RUN_TYPE" default="$(env RUN_TYPE)" />
  <arg name="SENSORS" default="$(env SENSORS)" />
  <arg name="PIXGARM" default="$(optenv PIXGARM false)" />
  <arg name="STANDALONE" default="$(optenv STANDALONE false)" />

    <!-- other args -->
  <arg name="fcu_frame" default="$(arg UAV_NAME)/fcu" />
  <arg name="fcu_frame_slashless" default="fcu_$(arg UAV_NAME)" />

    <!-- Mavros -->
  <include file="$(find mrs_general)/launch/mavros_uav.launch" />

    <!-- Teraranger one //{ -->

  <group if="$(eval 'teraranger' in arg('SENSORS'))">

    <arg name="teraranger_frame" default="teraranger_frame" />

    <include file="$(find terarangerone)/launch/uav.launch" />

    <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg fcu_frame_slashless)_to_$(arg teraranger_frame)" args="0.0 0.1 -0.03 0 1.57079632679 0.0 $(arg fcu_frame) $(arg teraranger_frame)" />

  </group>

  <!-- //} -->

  <!-- Garmin //{ -->

  <group if="$(eval 'garmin' in arg('SENSORS'))">

    <arg name="garmin_frame" default="$(arg UAV_NAME)/garmin" />
    <arg name="garmin_frame_up" default="$(arg UAV_NAME)/garmin_up" />

    <arg name="garmin_frame_slashless" default="garmin_$(arg UAV_NAME)" />
    <arg name="garmin_frame_up_slashless" default="garmin_up_$(arg UAV_NAME)" />

      <!-- TF for garmin down -->
    <group ns="$(arg UAV_NAME)" if="$(eval 'garmin_down' in arg('SENSORS').replace(',', ' ').split())">

      <group if="$(eval arg('UAV_TYPE') == 'f450')">
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg fcu_frame_slashless)_to_$(arg garmin_frame_slashless)" args="0.0 0.1 -0.03 0 1.57079632679 0.0 $(arg fcu_frame) $(arg garmin_frame)" />
      </group>

      <group if="$(eval arg('UAV_TYPE') == 'f550')">
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg fcu_frame_slashless)_to_$(arg garmin_frame_slashless)" args="0.0 0.1 -0.03 0 1.57079632679 0.0 $(arg fcu_frame) $(arg garmin_frame)" />
      </group>

      <group if="$(eval arg('UAV_TYPE') == 't650')">
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg fcu_frame_slashless)_to_$(arg garmin_frame_slashless)" args="0.0 0.1 -0.03 0 1.57079632679 0.0 $(arg fcu_frame) $(arg garmin_frame)" />
      </group>

      <group if="$(eval arg('UAV_TYPE') == 'naki')">
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg fcu_frame_slashless)_to_$(arg garmin_frame_slashless)" args="0.19918 -0.115 -0.025 0 1.57079632679 0.0 $(arg fcu_frame) $(arg garmin_frame)" />
      </group>

    </group>

    <!-- TF for garmin up -->
    <group ns="$(arg UAV_NAME)" if="$(eval 'garmin_up' in arg('SENSORS').replace(',', ' ').split())">
      <group if="$(eval arg('UAV_TYPE') == 'f450')">
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg fcu_frame_slashless)_to_$(arg garmin_frame_up_slashless)" args="0.0 0.13 0.02 0 -1.57079632679 0.0 $(arg fcu_frame) $(arg garmin_frame_up)" />
      </group>

      <group if="$(eval arg('UAV_TYPE') == 'f550')">
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg fcu_frame_slashless)_to_$(arg garmin_frame_up_slashless)" args="0.0 0.13 0.02 0 -1.57079632679 0.0 $(arg fcu_frame) $(arg garmin_frame_up)" />
      </group>

      <group if="$(eval arg('UAV_TYPE') == 't650')">
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg fcu_frame_slashless)_to_$(arg garmin_frame_up_slashless)" args="0.0 0.13 0.02 0 -1.57079632679 0.0 $(arg fcu_frame) $(arg garmin_frame_up)" />
      </group>

      <group if="$(eval arg('UAV_TYPE') == 'naki')">
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg fcu_frame_slashless)_to_$(arg garmin_frame_up_slashless)" args="0.09 -0.039 -0.01 0 -1.57079632679 0.0 $(arg fcu_frame) $(arg garmin_frame_up)" />
      </group>
    </group>

    <!-- The node -->
    <group if="$(eval not arg('PIXGARM') and not ('datapodavac' in arg('SENSORS')))">

      <include file="$(find mrs_serial)/launch/uav.launch">

        <arg name="name" value="_arduino" />
        <arg name="portname" value="/dev/arduino" />

      </include>

    </group>

  </group>

  <!-- //} -->

  <!-- Rplidar //{ -->

  <group if="$(eval 'rplidar' in arg('SENSORS'))">

    <arg name="rplidar_frame" default="$(arg UAV_NAME)/rplidar" />
    <arg name="rplidar_frame_slashless" default="rplidar_$(arg UAV_NAME)" />

    <arg name="mode" if="$(eval ('rplidar_indoor' in arg('SENSORS').replace(',', ' ').split()))" value="indoor" />
    <arg name="mode" if="$(eval ('rplidar_outdoor' in arg('SENSORS').replace(',', ' ').split()))" value="outdoor" />

      <!-- if no mode is specified, assume outdoor -->
    <arg name="mode" if="$(eval (not ('rplidar_indoor' in arg('SENSORS').replace(',', ' ').split())) and (not ('rplidar_outdoor' in arg('SENSORS').replace(',', ' ').split())))" value="outdoor" />

      <!-- TF -->
    <group if="$(eval arg('UAV_TYPE') == 'f450')">
      <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg fcu_frame_slashless)_to_$(arg rplidar_frame_slashless)" args="0.0 0.0 0.15 0 0.0 0.0 $(arg fcu_frame) $(arg rplidar_frame)" />
    </group>

    <group if="$(eval arg('UAV_TYPE') == 'f550')">
      <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg fcu_frame_slashless)_to_$(arg rplidar_frame_slashless)" args="0.0 0.0 0.15 0 0.0 0.0 $(arg fcu_frame) $(arg rplidar_frame)" />
    </group>

    <group if="$(eval arg('UAV_TYPE') == 't650')">
      <group if="$(eval arg('NATO_NAME') == 'mike')">
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg fcu_frame_slashless)_to_$(arg rplidar_frame_slashless)" args="0.04 0.0 0.15 0 0.0 0.0 $(arg fcu_frame) $(arg rplidar_frame)" />
      </group>
      <group unless="$(eval arg('NATO_NAME') == 'mike')">
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg fcu_frame_slashless)_to_$(arg rplidar_frame_slashless)" args="0.0 0.0 0.15 0 0.0 0.0 $(arg fcu_frame) $(arg rplidar_frame)" />
      </group>
    </group>

    <group if="$(eval arg('UAV_TYPE') == 'naki')">
      <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg fcu_frame_slashless)_to_$(arg rplidar_frame_slashless)" args="0.0 0.0 0.205 0 0.0 0.0 $(arg fcu_frame) $(arg rplidar_frame)" />
    </group>

    <!-- The node -->
    <include file="$(find rplidar_ros)/launch/uav.launch">

      <arg name="mode" value="$(arg mode)" />

    </include>

  </group>

  <!-- //} -->

  <!-- Teraranger thermal //{ -->

  <group if="$(eval 'trinocular_thermal' in arg('SENSORS'))">

    <arg name="thermal_top_frame" default="$(arg UAV_NAME)/thermal/top" />
    <arg name="thermal_middle_frame" default="$(arg UAV_NAME)/thermal/middle" />
    <arg name="thermal_bottom_frame" default="$(arg UAV_NAME)/thermal/bottom" />
    <arg name="thermal_top_frame_slashless" default="$(arg UAV_NAME)_thermal_top" />
    <arg name="thermal_middle_frame_slashless" default="$(arg UAV_NAME)_thermal_middle" />
    <arg name="thermal_bottom_frame_slashless" default="$(arg UAV_NAME)_thermal_bottom" />

      <group if="$(eval arg('UAV_TYPE') == 't650')">
          <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg fcu_frame_slashless)_to_$(arg thermal_top_frame_slashless)"     args="0.158 0.08 -0.05 0 -0.523599  0 $(arg fcu_frame) $(arg thermal_top_frame)" />
          <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg fcu_frame_slashless)_to_$(arg thermal_middle_frame_slashless)"  args="0.158 0.08 -0.05 0  0         0 $(arg fcu_frame) $(arg thermal_middle_frame)" />
          <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg fcu_frame_slashless)_to_$(arg thermal_bottom_frame_slashless)"  args="0.158 0.08 -0.05 0  0.523599  0 $(arg fcu_frame) $(arg thermal_bottom_frame)" />
        <!-- </group> -->
      </group>
    <!-- The node -->
    <include file="$(find teraranger)/launch/trinocular_thermal.launch" />

  </group>

  <!-- //} -->

  <!-- Realsense //{ -->

  <group if="$(eval ('realsense' in arg('SENSORS')))">

    <arg name="realsense_frame" default="$(arg UAV_NAME)/rs_d435/link" />
    <arg name="realsense_frame_tmp" default="$(arg UAV_NAME)/rs_d435/tmp_optical" />
    <arg name="realsense_frame_slashless" default="$(arg UAV_NAME)_rs_d435_link" />

      <!-- TF -->
      <!-- front //{ -->

    <group if="$(eval ('realsense_front' in arg('SENSORS').replace(',', ' ').split()))">

      <group if="$(eval arg('UAV_TYPE') == 'f450')">
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg fcu_frame_slashless)_to_$(arg realsense_frame_slashless)" args="0.16 0.0 -0.05 0.0 0.0 0.0 $(arg fcu_frame) $(arg realsense_frame)" />
      </group>

      <group if="$(eval arg('UAV_TYPE') == 'f550')">
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg fcu_frame_slashless)_to_$(arg realsense_frame_slashless)" args="0.3 0 -0.05 0 0 0 $(arg fcu_frame) $(arg realsense_frame)" />
      </group>

      <group if="$(eval arg('UAV_TYPE') == 't650')">
        <group if="$(eval arg('NATO_NAME') == 'charlie')">
          <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg fcu_frame_slashless)_to_$(arg realsense_frame_slashless)" args="0.32 -0.01 -0.03 0 0 0 $(arg fcu_frame) $(arg realsense_frame)" />
        </group>
        <group unless="$(eval arg('NATO_NAME') == 'charlie')">
          <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg fcu_frame_slashless)_to_$(arg realsense_frame_slashless)" args="0.158 0 -0.05 0 0 0 $(arg fcu_frame) $(arg realsense_frame)" />
        </group>
      </group>

      <group if="$(eval arg('UAV_TYPE') == 'naki')">
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg fcu_frame_slashless)_to_$(arg realsense_frame_slashless)" args="0.3 0 -0.05 0 0 0 $(arg fcu_frame) $(arg realsense_frame)" />
      </group>

      <group if="$(eval arg('NATO_NAME') == 'charlie')">
        <include file="$(find realsense_d435)/launch/ball_catch.launch" />
      </group>
      <group unless="$(eval arg('NATO_NAME') == 'charlie')">
        <include file="$(find realsense_d435)/launch/high_acc.launch" />
      </group>

    </group>

    <!-- //} -->

    <!-- TF -->
    <!-- brick //{ -->

    <group if="$(eval ('realsense_brick' in arg('SENSORS').replace(',', ' ').split()))">

      <group if="$(eval arg('UAV_TYPE') == 'f450')">
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg fcu_frame_slashless)_to_$(arg realsense_frame_slashless)" args="0.16 0.0 -0.05 0.0 0.0 0.0 $(arg fcu_frame) $(arg realsense_frame)" />
      </group>

      <group if="$(eval arg('UAV_TYPE') == 'f550')">
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg fcu_frame_slashless)_to_$(arg realsense_frame_slashless)" args="0.3 0 -0.05 0 0 0 $(arg fcu_frame) $(arg realsense_frame)" />
      </group>


      <group if="$(eval arg('UAV_TYPE') == 't650')">

        <group if="$(eval arg('NATO_NAME') == 'echo')">

          <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg fcu_frame_slashless)_to_$(arg realsense_frame_slashless)" args="0.23 0.23 -0.07 -2.566 1.257 -0.972 $(arg fcu_frame) $(arg realsense_frame)" />

        </group>

        <group if="$(eval arg('NATO_NAME') == 'delta')">

          <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg realsense_frame_slashless)_tmp" args="0 0.19 -0.04  3.14159265359 -0.2617993878 -3.14159265359 $(arg fcu_frame) $(arg realsense_frame_tmp)" />
          <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg fcu_frame_slashless)_to_$(arg realsense_frame_slashless)" args="0 0 0  1.57079632679 -1.57079632679 0  $(arg realsense_frame_tmp)  $(arg realsense_frame)" />

        </group>

      </group>

      <group if="$(eval arg('UAV_TYPE') == 'naki')">
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg fcu_frame_slashless)_to_$(arg realsense_frame_slashless)" args="0.3 0 -0.05 0 0 0 $(arg fcu_frame) $(arg realsense_frame)" />
      </group>

      <include file="$(find realsense_d435)/launch/uav_brick.launch" />

    </group>

    <!-- //} -->

    <group if="$(eval ('realsense_fire' in arg('SENSORS').replace(',', ' ').split()))">

      <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg fcu_frame_slashless)_to_$(arg realsense_frame_slashless)" args="0.2 0.0 -0.05 0.0 0.0 0.0 $(arg fcu_frame) $(arg realsense_frame)" />
      <include file="$(find realsense_d435)/launch/uav_window_15fps.launch" />
    </group>


  </group>

  <!-- //} -->

  <!-- Bluefox //{ -->

  <group if="$(eval ('bluefox' in arg('SENSORS')))">

    <!-- Bluefox optflow //{ -->

    <group if="$(eval ('bluefox_optflow' in arg('SENSORS').replace(',', ' ').split()))">

      <arg name="camera_frame" default="$(arg UAV_NAME)/bluefox_optflow_optical" />

        <!-- TF -->

      <group if="$(eval arg('UAV_TYPE') == 'f450')">
        <arg name="cam_yaw" default="-1.57079632679" />
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg fcu_frame_slashless)_to_optflow" args="0 0 -0.1 $(arg cam_yaw) 0.00000000000 -3.14159265359 $(arg fcu_frame) $(arg camera_frame)" />
      </group>

      <group if="$(eval arg('UAV_TYPE') == 'f550')">
        <arg name="cam_yaw" default="-1.57079632679" />
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg fcu_frame_slashless)_to_optflow" args="0 0 -0.1 $(arg cam_yaw) 0.00000000000 -3.14159265359 $(arg fcu_frame) $(arg camera_frame)" />
      </group>

      <group if="$(eval arg('UAV_TYPE') == 't650')">
        <arg name="cam_yaw" default="1.57079632679" />
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg fcu_frame_slashless)_to_optflow" args="-0.04 -0.18 -0.06 $(arg cam_yaw) 0.00000000000 -3.14159265359 $(arg fcu_frame) $(arg camera_frame)" />
      </group>

      <group if="$(eval arg('UAV_TYPE') == 'naki')">
        <arg name="cam_yaw" default="-1.57079632679" />
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg fcu_frame_slashless)_to_optflow" args="0 0 -0.1 $(arg cam_yaw) 0.00000000000 -3.14159265359 $(arg fcu_frame) $(arg camera_frame)" />
      </group>

      <arg     if="$(arg STANDALONE)" name="nodelet" value="STANDALONE" />
      <arg unless="$(arg STANDALONE)" name="nodelet" value="load" />
      <arg     if="$(arg STANDALONE)" name="nodelet_manager" value="" />
      <arg unless="$(arg STANDALONE)" name="nodelet_manager" value="$(arg UAV_NAME)_optflow_nodelet_manager" />

        <!-- Nodelet manager -->
      <group ns="$(arg UAV_NAME)" if="$(eval arg('STANDALONE') == 0)">

        <node pkg="nodelet" type="nodelet" name="$(arg UAV_NAME)_optflow_nodelet_manager" args="manager" output="screen" launch-prefix="bash -c 'sleep 5; $0 $@'">
          <param name="num_worker_threads" value="8" />
        </node>

      </group>

      <arg name="cam_device" default="$(env BLUEFOX_OF)" />
      <arg name="node_start_delay" default="10" />
      <arg name="cam_rate" default="100" />
      <arg name="cam_plugin" default="true" />
      <arg name="cam_output" default="screen" />
      <arg name="cam_proc" default="false" />
      <arg name="cam_view" default="false" />
      <arg name="cam_calib" default="false" />

      <arg name="serial" default="$(arg cam_device)" />
      <arg name="camera_name" default="bluefox_optflow" />
      <arg name="camera" default="$(arg camera_name)" />
      <arg name="frame_id" default="$(arg camera)" />
      <arg name="calib_url" default="file://$(find mrs_general)/config/camera_calibrations/mv_$(arg cam_device).yaml" />
      <arg name="fps" default="$(arg cam_rate)" />
      <arg name="color" default="false" />
      <arg name="idpf" default="0" />
      <arg name="aec" default="true" />
      <arg name="expose_upper_limit_us" default="7500" />

      <arg name="expose_us" default="400" />
      <arg name="agc" default="true" />
      <arg name="boost" value="false" />
      <arg name="gain_db" default="0.0" />
      <arg name="cbm" default="0" />
      <arg name="ctm" default="1" />
      <arg name="dcfm" default="0" />
      <arg name="hdr" default="false" />
      <arg name="wbp" default="-1" />
      <arg name="request" default="0" />
      <arg name="mm" default="0" />

        <!-- Arguments for theora quality, images being compressed into "stream" -->
      <arg name="compressed_jpeg_quality" default="90" />
      <arg name="theora_keyframe_frequency" default="60" />
      <arg name="theora_target_bitrate" default="50000" />
      <arg name="theora_quality" default="8" />
      <arg name="theora_optimize_for" default="0" />

        <!-- Nodeleted bluefox node //{ -->

      <group ns="$(arg UAV_NAME)" if="$(eval arg('STANDALONE') == 0)">

        <include file="$(find bluefox2)/launch/single_nodelet.launch" >

          <!-- Common Interface -->
          <arg name="device" value="$(arg cam_device)" />
          <arg name="rate" value="$(arg cam_rate)" />
          <arg name="node_start_delay" value="$(arg node_start_delay)" />

            <!-- Camera Settings -->
          <arg name="serial" value="$(arg cam_device)" />
          <arg name="camera_name" value="$(arg camera_name)" />
          <arg name="camera" value="$(arg camera)" />
          <arg name="frame_id" value="$(arg frame_id)" />
          <arg name="calib_url" value="$(arg calib_url)" />
          <arg name="fps" value="$(arg fps)" />
          <arg name="color" value="$(arg color)" />
          <arg name="aec" value="$(arg aec)" />
          <arg name="expose_upper_limit_us" value="$(arg expose_upper_limit_us)" />
          <arg name="cbm" value="$(arg cbm)" />
          <arg name="ctm" value="$(arg ctm)" />
          <arg name="dcfm" value="$(arg dcfm)" />
          <arg name="hdr" value="$(arg hdr)" />
          <arg name="wbp" value="$(arg wbp)" />
          <arg name="expose_us" value="$(arg expose_us)" />
          <arg name="gain_db" value="$(arg gain_db)" />
          <arg name="boost" value="$(arg boost)" />
          <arg name="mm" value="$(arg mm)" />

            <!-- Node Settings -->
          <arg name="plugin" value="$(arg cam_plugin)" />
          <arg name="manager" value="$(arg UAV_NAME)_optflow_nodelet_manager" />
          <arg name="output" value="$(arg cam_output)" />
          <arg name="proc" value="$(arg cam_proc)" />
          <arg name="view" value="$(arg cam_view)" />
          <arg name="calib" value="$(arg cam_calib)" />

            <!-- Arguments for theora quality, images being compressed into "stream" -->
          <arg name="compressed_jpeg_quality" default="$(arg compressed_jpeg_quality)" />
          <arg name="theora_keyframe_frequency" default="$(arg theora_keyframe_frequency)" />
          <arg name="theora_target_bitrate" default="$(arg theora_target_bitrate)" />
          <arg name="theora_quality" default="$(arg theora_quality)" />
          <arg name="theora_optimize_for" default="$(arg theora_optimize_for)" />

        </include>

      </group>

      <!-- //} -->

      <!-- Standalone bluefox node //{ -->

      <group ns="$(arg UAV_NAME)" if="$(eval arg('STANDALONE') == 1)">

        <include file="$(find bluefox2)/launch/single_node.launch" >

          <!-- Common Interface -->
          <arg name="device" value="$(arg cam_device)" />
          <arg name="rate" value="$(arg cam_rate)" />

            <!-- Camera Settings -->
          <arg name="serial" value="$(arg cam_device)" />
          <arg name="camera_name" value="$(arg camera_name)" />
          <arg name="camera" value="$(arg camera)" />
          <arg name="frame_id" value="$(arg frame_id)" />
          <arg name="calib_url" value="$(arg calib_url)" />
          <arg name="fps" value="$(arg fps)" />
          <arg name="color" value="$(arg color)" />
          <arg name="aec" value="$(arg aec)" />
          <arg name="expose_upper_limit_us" value="$(arg expose_upper_limit_us)" />
          <arg name="cbm" value="$(arg cbm)" />
          <arg name="ctm" value="$(arg ctm)" />
          <arg name="dcfm" value="$(arg dcfm)" />
          <arg name="hdr" value="$(arg hdr)" />
          <arg name="wbp" value="$(arg wbp)" />
          <arg name="expose_us" value="$(arg expose_us)" />
          <arg name="gain_db" value="$(arg gain_db)" />
          <arg name="boost" value="$(arg boost)" />
          <arg name="mm" value="$(arg mm)" />

            <!-- Node Settings -->
          <arg name="plugin" value="$(arg cam_plugin)" />
          <arg name="output" value="$(arg cam_output)" />
          <arg name="proc" value="$(arg cam_proc)" />
          <arg name="view" value="$(arg cam_view)" />
          <arg name="calib" value="$(arg cam_calib)" />

            <!-- Arguments for theora quality, images being compressed into "stream" -->
          <arg name="compressed_jpeg_quality" default="$(arg compressed_jpeg_quality)" />
          <arg name="theora_keyframe_frequency" default="$(arg theora_keyframe_frequency)" />
          <arg name="theora_target_bitrate" default="$(arg theora_target_bitrate)" />
          <arg name="theora_quality" default="$(arg theora_quality)" />
          <arg name="theora_optimize_for" default="$(arg theora_optimize_for)" />

        </include>

      </group>

      <!-- //} -->

    </group>

    <!-- //} -->

    <!-- Bluefox brick //{ -->

    <group if="$(eval ('bluefox_brick' in arg('SENSORS').replace(',', ' ').split()))">

      <arg name="camera_frame" default="brick_cam_$(arg UAV_NAME)" />

        <!-- TF -->

      <arg name="brick_cam_yaw" default="3.14159265359" />
      <group if="$(eval arg('NATO_NAME') == 'echo' or arg('NATO_NAME') == 'delta' or arg('NATO_NAME') == 'foxtrot')">
        <node pkg="tf2_ros" type="static_transform_publisher" name="brick_cam_tf" args="0 -0.19 -0.06 $(arg brick_cam_yaw) 0.00000000000 -3.14159265359 $(arg fcu_frame) $(arg camera_frame)" />
      </group>

      <arg     if="$(arg STANDALONE)" name="nodelet" value="STANDALONE" />
      <arg unless="$(arg STANDALONE)" name="nodelet" value="load" />
      <arg     if="$(arg STANDALONE)" name="nodelet_manager" value="" />
      <arg unless="$(arg STANDALONE)" name="nodelet_manager" value="$(arg UAV_NAME)_brick_nodelet_manager" />

        <!-- Nodelet manager -->
      <group ns="$(arg UAV_NAME)" if="$(eval arg('STANDALONE') == 0)">

        <node pkg="nodelet" type="nodelet" name="$(arg UAV_NAME)_brick_nodelet_manager" args="manager" output="screen" launch-prefix="bash -c 'sleep 5; $0 $@'">
          <param name="num_worker_threads" value="5" />
        </node>

      </group>

      <arg name="cam_device" default="$(env BLUEFOX_BRICK)" />
      <arg name="cam_rate" default="30" />
      <arg name="cam_plugin" default="true" />
      <arg name="cam_output" default="screen" />
      <arg name="cam_proc" default="false" />
      <arg name="cam_view" default="false" />
      <arg name="cam_calib" default="false" />
      <arg name="node_start_delay" default="10" />

      <arg name="serial" default="$(arg cam_device)" />
      <arg name="camera_name" default="bluefox_brick" />
      <arg name="camera" default="$(arg camera_name)" />
      <arg name="frame_id" default="$(arg camera_frame)" />
      <arg name="calib_url" default="file://$(find mrs_general)/config/camera_calibrations/mv_$(arg cam_device).yaml" />
      <arg name="fps" default="$(arg cam_rate)" />
      <arg name="color" default="true" />
      <arg name="idpf" default="0" />
      <arg name="aec" default="true" />
      <arg name="expose_upper_limit_us" default="20000" />
      <arg name="des_grey_value" default="128" />
      <arg name="expose_us" default="100" />
      <arg name="agc" default="true" />
      <arg name="boost" value="false" />
      <arg name="gain_db" default="0.0" />
      <arg name="cbm" default="0" />
      <arg name="ctm" default="1" />
      <arg name="dcfm" default="0" />
      <arg name="hdr" default="false" />
      <arg name="wbp" default="-1" />
      <arg name="request" default="0" />
      <arg name="mm" default="0" />

        <!-- Arguments for theora quality, images being compressed into "stream" -->
      <arg name="compressed_jpeg_quality" default="90" />
      <arg name="theora_keyframe_frequency" default="60" />
      <arg name="theora_target_bitrate" default="50000" />
      <arg name="theora_quality" default="8" />
      <arg name="theora_optimize_for" default="0" />

        <!-- Nodeleted bluefox node //{ -->

      <group ns="$(arg UAV_NAME)" if="$(eval arg('STANDALONE') == 0)">

        <include file="$(find bluefox2)/launch/single_nodelet.launch" >

          <!-- Common Interface -->
          <arg name="device" value="$(arg cam_device)" />
          <arg name="rate" value="$(arg cam_rate)" />
          <arg name="node_start_delay" value="$(arg node_start_delay)" />

            <!-- Camera Settings -->
          <arg name="serial" value="$(arg cam_device)" />
          <arg name="camera_name" value="$(arg camera_name)" />
          <arg name="camera" value="$(arg camera)" />
          <arg name="frame_id" value="$(arg frame_id)" />
          <arg name="calib_url" value="$(arg calib_url)" />
          <arg name="fps" value="$(arg fps)" />
          <arg name="color" value="$(arg color)" />
          <arg name="aec" value="$(arg aec)" />
          <arg name="expose_upper_limit_us" value="$(arg expose_upper_limit_us)" />
          <arg name="des_grey_value" value="$(arg des_grey_value)"/>
          <arg name="cbm" value="$(arg cbm)" />
          <arg name="ctm" value="$(arg ctm)" />
          <arg name="dcfm" value="$(arg dcfm)" />
          <arg name="hdr" value="$(arg hdr)" />
          <arg name="wbp" value="$(arg wbp)" />
          <arg name="expose_us" value="$(arg expose_us)" />
          <arg name="gain_db" value="$(arg gain_db)" />
          <arg name="boost" value="$(arg boost)" />
          <arg name="mm" value="$(arg mm)" />

            <!-- Node Settings -->
          <arg name="plugin" value="$(arg cam_plugin)" />
          <arg name="manager" value="$(arg UAV_NAME)_brick_nodelet_manager" />
          <arg name="output" value="$(arg cam_output)" />
          <arg name="proc" value="$(arg cam_proc)" />
          <arg name="view" value="$(arg cam_view)" />
          <arg name="calib" value="$(arg cam_calib)" />

            <!-- Arguments for theora quality, images being compressed into "stream" -->
          <arg name="compressed_jpeg_quality" default="$(arg compressed_jpeg_quality)" />
          <arg name="theora_keyframe_frequency" default="$(arg theora_keyframe_frequency)" />
          <arg name="theora_target_bitrate" default="$(arg theora_target_bitrate)" />
          <arg name="theora_quality" default="$(arg theora_quality)" />
          <arg name="theora_optimize_for" default="$(arg theora_optimize_for)" />

        </include>

      </group>

      <!-- //} -->

    </group>

    <!-- //} -->

    <!-- Bluefox darpa //{ -->

    <!-- Bluefox left //{-->
    <group if="$(eval ('bluefox_darpa_left' in arg('SENSORS').replace(',', ' ').split()))">

      <arg name="camera_frame" default="$(arg UAV_NAME)/bluefox_left" />

        <!-- TF -->
      <group if="$(eval arg('UAV_TYPE') == 'f450')">
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg fcu_frame_slashless)_to_bluefox_left" args="0.170 0.184 -0.034 0.785398163 0.34906585 3.1415927 $(arg fcu_frame) $(arg camera_frame)" />
      </group>

      <arg     if="$(arg STANDALONE)" name="nodelet" value="STANDALONE" />
      <arg unless="$(arg STANDALONE)" name="nodelet" value="load" />
      <arg     if="$(arg STANDALONE)" name="nodelet_manager" value="" />
      <arg unless="$(arg STANDALONE)" name="nodelet_manager" value="$(arg UAV_NAME)_bluefox_left_nodelet_manager" />

        <!-- Nodelet manager -->
      <group ns="$(arg UAV_NAME)" if="$(eval arg('STANDALONE') == 0)">

        <node pkg="nodelet" type="nodelet" name="$(arg UAV_NAME)_bluefox_left_nodelet_manager" args="manager" output="screen" launch-prefix="bash -c 'sleep 5; $0 $@'">
          <param name="num_worker_threads" value="8" />
        </node>

      </group>

      <arg name="cam_device" default="$(env BLUEFOX_DARPA_LEFT)" />
      <arg name="cam_rate" default="20" />
      <arg name="cam_plugin" default="true" />
      <arg name="cam_output" default="screen" />
      <arg name="cam_proc" default="false" />
      <arg name="cam_view" default="false" />
      <arg name="cam_calib" default="false" />

      <arg name="serial" default="$(arg cam_device)" />
      <arg name="camera_name" default="bluefox_left" />
      <arg name="camera" default="$(arg camera_name)" />
      <arg name="frame_id" default="$(arg camera)" />
      <arg name="calib_url" default="file://$(find mrs_general)/config/camera_calibrations/mv_$(arg cam_device)_darpa.yaml" />
      <arg name="fps" default="$(arg cam_rate)" />
      <arg name="color" default="true" />
      <arg name="idpf" default="0" />
      <arg name="aec" default="true" />
      <arg name="expose_upper_limit_us" default="20000" />
      <arg name="des_grey_value" default="128" />

      <arg name="expose_us" default="15000" />
      <arg name="agc" default="true" />
      <arg name="boost" value="false" />
      <arg name="gain_db" default="5.0" />
      <arg name="cbm" default="0" />
      <arg name="ctm" default="1" />
      <arg name="dcfm" default="0" />
      <arg name="hdr" default="false" />
      <arg name="wbp" default="-1" />
      <arg name="request" default="0" />
      <arg name="mm" default="0" />

        <!-- Arguments for theora quality, images being compressed into "stream" -->
      <arg name="compressed_jpeg_quality" default="90" />
      <arg name="theora_keyframe_frequency" default="60" />
      <arg name="theora_target_bitrate" default="50000" />
      <arg name="theora_quality" default="8" />
      <arg name="theora_optimize_for" default="0" />

        <!-- Nodeleted bluefox node //{ -->
      <group ns="$(arg UAV_NAME)" if="$(eval arg('STANDALONE') == 0)">

        <include file="$(find bluefox2)/launch/single_nodelet.launch" >

          <!-- Common Interface -->
          <arg name="device" value="$(arg cam_device)" />
          <arg name="rate" value="$(arg cam_rate)" />

            <!-- Camera Settings -->
          <arg name="serial" value="$(arg cam_device)" />
          <arg name="camera_name" value="$(arg camera_name)" />
          <arg name="camera" value="$(arg camera)" />
          <arg name="frame_id" value="$(arg frame_id)" />
          <arg name="calib_url" value="$(arg calib_url)" />
          <arg name="fps" value="$(arg fps)" />
          <arg name="color" value="$(arg color)" />
          <arg name="aec" value="$(arg aec)" />
          <arg name="expose_upper_limit_us" value="$(arg expose_upper_limit_us)" />
          <arg name="des_grey_value" value="$(arg des_grey_value)"/>
          <arg name="cbm" value="$(arg cbm)" />
          <arg name="ctm" value="$(arg ctm)" />
          <arg name="dcfm" value="$(arg dcfm)" />
          <arg name="hdr" value="$(arg hdr)" />
          <arg name="wbp" value="$(arg wbp)" />
          <arg name="expose_us" value="$(arg expose_us)" />
          <arg name="gain_db" value="$(arg gain_db)" />
          <arg name="boost" value="$(arg boost)" />
          <arg name="mm" value="$(arg mm)" />

            <!-- Node Settings -->
          <arg name="plugin" value="$(arg cam_plugin)" />
          <arg name="manager" value="$(arg UAV_NAME)_bluefox_left_nodelet_manager" />
          <arg name="output" value="$(arg cam_output)" />
          <arg name="proc" value="$(arg cam_proc)" />
          <arg name="view" value="$(arg cam_view)" />
          <arg name="calib" value="$(arg cam_calib)" />

            <!-- Arguments for theora quality, images being compressed into "stream" -->
          <arg name="compressed_jpeg_quality" default="$(arg compressed_jpeg_quality)" />
          <arg name="theora_keyframe_frequency" default="$(arg theora_keyframe_frequency)" />
          <arg name="theora_target_bitrate" default="$(arg theora_target_bitrate)" />
          <arg name="theora_quality" default="$(arg theora_quality)" />
          <arg name="theora_optimize_for" default="$(arg theora_optimize_for)" />

        </include>

      </group>

      <!-- //} -->

    </group>

    <!-- //} -->

    <!-- Bluefox right //{-->
    <group if="$(eval ('bluefox_darpa_right' in arg('SENSORS').replace(',', ' ').split()))">

      <arg name="camera_frame" default="$(arg UAV_NAME)/bluefox_right" />

        <!-- TF -->

      <group if="$(eval arg('UAV_TYPE') == 'f450')">
        <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg fcu_frame_slashless)_to_bluefox_right" args="0.180 -0.170 -0.034 -0.785398163 0.34906585 3.1415927 $(arg fcu_frame) $(arg camera_frame)" />
      </group>

      <arg     if="$(arg STANDALONE)" name="nodelet" value="STANDALONE" />
      <arg unless="$(arg STANDALONE)" name="nodelet" value="load" />
      <arg     if="$(arg STANDALONE)" name="nodelet_manager" value="" />
      <arg unless="$(arg STANDALONE)" name="nodelet_manager" value="$(arg UAV_NAME)_bluefox_right_nodelet_manager" />

        <!-- Nodelet manager -->
      <group ns="$(arg UAV_NAME)" if="$(eval arg('STANDALONE') == 0)">

        <node pkg="nodelet" type="nodelet" name="$(arg UAV_NAME)_bluefox_right_nodelet_manager" args="manager" output="screen" launch-prefix="bash -c 'sleep 5; $0 $@'">
          <param name="num_worker_threads" value="8" />
        </node>

      </group>

      <arg name="cam_device" default="$(env BLUEFOX_DARPA_RIGHT)" />
      <arg name="cam_rate" default="20" />
      <arg name="cam_plugin" default="true" />
      <arg name="cam_output" default="screen" />
      <arg name="cam_proc" default="false" />
      <arg name="cam_view" default="false" />
      <arg name="cam_calib" default="false" />

      <arg name="serial" default="$(arg cam_device)" />
      <arg name="camera_name" default="bluefox_right" />
      <arg name="camera" default="$(arg camera_name)" />
      <arg name="frame_id" default="$(arg camera)" />
      <arg name="calib_url" default="file://$(find mrs_general)/config/camera_calibrations/mv_$(arg cam_device)_darpa.yaml" />
      <arg name="fps" default="$(arg cam_rate)" />
      <arg name="color" default="true" />
      <arg name="idpf" default="0" />
      <arg name="aec" default="true" />
      <arg name="expose_upper_limit_us" default="20000" />
      <arg name="des_grey_value" default="128" />

      <arg name="expose_us" default="15000" />
      <arg name="agc" default="true" />
      <arg name="boost" value="false" />
      <arg name="gain_db" default="5.0" />
      <arg name="cbm" default="0" />
      <arg name="ctm" default="1" />
      <arg name="dcfm" default="0" />
      <arg name="hdr" default="false" />
      <arg name="wbp" default="-1" />
      <arg name="request" default="0" />
      <arg name="mm" default="0" />

        <!-- Arguments for theora quality, images being compressed into "stream" -->
      <arg name="compressed_jpeg_quality" default="90" />
      <arg name="theora_keyframe_frequency" default="60" />
      <arg name="theora_target_bitrate" default="50000" />
      <arg name="theora_quality" default="8" />
      <arg name="theora_optimize_for" default="0" />

        <!-- Nodeleted bluefox node //{ -->
      <group ns="$(arg UAV_NAME)" if="$(eval arg('STANDALONE') == 0)">

        <include file="$(find bluefox2)/launch/single_nodelet.launch" >

          <!-- Common Interface -->
          <arg name="device" value="$(arg cam_device)" />
          <arg name="rate" value="$(arg cam_rate)" />

            <!-- Camera Settings -->
          <arg name="serial" value="$(arg cam_device)" />
          <arg name="camera_name" value="$(arg camera_name)" />
          <arg name="camera" value="$(arg camera)" />
          <arg name="frame_id" value="$(arg frame_id)" />
          <arg name="calib_url" value="$(arg calib_url)" />
          <arg name="fps" value="$(arg fps)" />
          <arg name="color" value="$(arg color)" />
          <arg name="aec" value="$(arg aec)" />
          <arg name="expose_upper_limit_us" value="$(arg expose_upper_limit_us)" />
          <arg name="des_grey_value" value="$(arg des_grey_value)"/>
          <arg name="cbm" value="$(arg cbm)" />
          <arg name="ctm" value="$(arg ctm)" />
          <arg name="dcfm" value="$(arg dcfm)" />
          <arg name="hdr" value="$(arg hdr)" />
          <arg name="wbp" value="$(arg wbp)" />
          <arg name="expose_us" value="$(arg expose_us)" />
          <arg name="gain_db" value="$(arg gain_db)" />
          <arg name="boost" value="$(arg boost)" />
          <arg name="mm" value="$(arg mm)" />

            <!-- Node Settings -->
          <arg name="plugin" value="$(arg cam_plugin)" />
          <arg name="manager" value="$(arg UAV_NAME)_bluefox_right_nodelet_manager" />
          <arg name="output" value="$(arg cam_output)" />
          <arg name="proc" value="$(arg cam_proc)" />
          <arg name="view" value="$(arg cam_view)" />
          <arg name="calib" value="$(arg cam_calib)" />

            <!-- Arguments for theora quality, images being compressed into "stream" -->
          <arg name="compressed_jpeg_quality" default="$(arg compressed_jpeg_quality)" />
          <arg name="theora_keyframe_frequency" default="$(arg theora_keyframe_frequency)" />
          <arg name="theora_target_bitrate" default="$(arg theora_target_bitrate)" />
          <arg name="theora_quality" default="$(arg theora_quality)" />
          <arg name="theora_optimize_for" default="$(arg theora_optimize_for)" />

        </include>

      </group>

      <!-- //} -->

    </group>

    <!-- //} -->

    <!--//}-->

  </group>

  <!-- //} -->

  <!-- Bluefox3 //{ -->

  <group if="$(eval ('bluefox3' in arg('SENSORS')))">

    <!-- Bluefox3 front //{ -->

    <group if="$(eval ('bluefox3_front' in arg('SENSORS').replace(',', ' ').split()))">

      <arg name="camera_name" default="bluefox3_front" />
      <arg name="camera_frame" default="$(arg UAV_NAME)/$(arg camera_name)" />

        <!-- TF -->
      <node pkg="tf2_ros" type="static_transform_publisher" name="blufox3_front_tf" args="0.32 0.0 0.0 1.5707963 3.1415927 1.5707963 $(arg fcu_frame) $(arg camera_frame)" />

      <arg     if="$(arg STANDALONE)" name="nodelet_manager" value="" />
      <arg unless="$(arg STANDALONE)" name="nodelet_manager" value="$(arg UAV_NAME)_bfx3_nodelet_manager" />
      <arg     if="$(arg STANDALONE)" name="cam_plugin" value="false" />
      <arg unless="$(arg STANDALONE)" name="cam_plugin" value="true" />

        <!-- Nodelet manager -->
      <group ns="$(arg UAV_NAME)" if="$(eval arg('STANDALONE') == 0)">

        <node pkg="nodelet" type="nodelet" name="$(arg nodelet_manager)" args="manager" output="screen">
          <param name="num_worker_threads" value="5" />
        </node>

      </group>

      <arg name="camera_serial" default="$(env BLUEFOX3_FRONT)" />
      <arg name="frame_id" default="$(arg camera_frame)" />
      <arg name="calib_url" default="file://$(find mrs_general)/config/camera_calibrations/mv_$(arg camera_serial).yaml" />

      <arg name="cam_output" default="screen" />

        <!-- bluefox3 nodelet //{ -->
      <group ns="$(arg UAV_NAME)" >

        <include file="$(find bluefox3)/launch/bluefox3.launch" >

          <!-- Camera Settings -->
          <arg name="serial" value="$(arg camera_serial)" />
          <arg name="camera_name" value="$(arg camera_name)" />
          <arg name="frame_id" value="$(arg frame_id)" />
          <arg name="calib_url" value="$(arg calib_url)" />

            <!-- Node Settings -->
          <arg name="plugin" value="$(arg cam_plugin)" />
          <arg name="manager" value="$(arg nodelet_manager)" />
          <arg name="output" value="$(arg cam_output)" />

        </include>

      </group>

      <!-- //} -->

    </group>

    <!-- //} -->

  </group>

  <!-- //} -->

  <!-- Ouster //{ -->

  <group if="$(eval 'ouster' in arg('SENSORS'))">

    <arg name="ouster_frame" default="$(arg UAV_NAME)/os1_sensor" />
    <arg name="ouster_lidar_frame" default="$(arg UAV_NAME)/os1_lidar" />
    <arg name="ouster_imu_frame" default="$(arg UAV_NAME)/os1_imu" />
    <arg name="ouster_frame_slashless" default="os1_sensor_$(arg UAV_NAME)" />
    <arg name="ouster_lidar_slashless" default="os1_lidar_$(arg UAV_NAME)" />
    <arg name="ouster_imu_slashless" default="os1_imu_$(arg UAV_NAME)" />

      <!-- Platform specific TF -->
    <group if="$(eval arg('UAV_TYPE') == 'f450')">
      <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg fcu_frame_slashless)_to_$(arg ouster_frame_slashless)" args="0.0 0.0 0.078 0 0.0 0.0 $(arg fcu_frame) $(arg ouster_frame)" />
    </group>

    <!-- General Ouster TF -->
    <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg ouster_frame_slashless)_to_$(arg ouster_lidar_slashless)" args="0.0 0.0 0.03618 3.14159265359 0.0 0.0 $(arg ouster_frame) $(arg ouster_lidar_frame)" />
    <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg ouster_frame_slashless)_to_$(arg ouster_imu_slashless)" args="0.006253 -0.011775 0.007645 0 0 0 $(arg ouster_frame) $(arg ouster_imu_frame)" />

      <!-- The node -->
    <include file="$(find ouster_ros)/launch/uav.launch" />

  </group>

  <!-- //} -->

  <!-- Datapodavac //{ -->

  <group if="$(eval ('datapodavac' in arg('SENSORS')))">

    <arg name="portname" default="/dev/datapodavac" />

    <include file="$(find mrs_serial)/launch/uav.launch">

      <!-- Common Interface -->
      <arg name="name" value="_datapodavac" />
      <arg name="portname" value="$(arg portname)" />

    </include>

  </group>

  <!-- //} -->

</launch>
